/* eslint no-unused-vars : 0 */
import MersenneTwister from 'mersenne-twister';
import SimplexNoise from 'simplex-noise';

import config from './config/config.json';
import elevationMapConfig from './config/elevationMap.json';
import temperatureMapConfig from './config/temperatureMap.json';

import PixiMapRenderer from './renderer/PixiMapRenderer';

import { oahuTheme, grayscaleTheme, temperatureTheme } from './themes';

import {
  organicNoiseGenerator,
  scaledNoiseGenerator,
  combineMaps,
  generateVerticalGradient,
} from './noises/noiseGen';

console.info('FINISTERRA - 2D World generated by noise functions and renderered with Pixi.js');
const app = new PixiMapRenderer(config.canvas, config.renderer, config.map);

console.info('GENERATE LAND MASS SHAPE');

const generateLandMass = (dimensions, noiseConfig) => {
  const rngGenerator = new MersenneTwister();
  const simplexNoise = new SimplexNoise(rngGenerator.random());

  // noise with smooth transitions
  const scaledNoise = scaledNoiseGenerator(simplexNoise, noiseConfig.scaledNoise, dimensions);

  // organic noise
  const organicNoise = organicNoiseGenerator(simplexNoise, noiseConfig.organicNoise, dimensions);

  // combine both noises
  const elevationNoise = combineMaps(
    config.map,
    organicNoise,
    scaledNoise,
    noiseConfig.combineMaps.weight,
  );
  return elevationNoise;
};
const elevationMap = generateLandMass(config.map, elevationMapConfig);

console.info('GENERATE TEMPERATURE MAP');

const generateTemperatureMap = (dimensions, noiseConfig, heightMap) => {
  const rngGenerator = new MersenneTwister();
  const simplexNoise = new SimplexNoise(rngGenerator.random());

  // south to north gradient
  const southToNorthGradient = generateVerticalGradient(config.map, 0, config.map.width, -1.0, 1.0);

  // organic noise
  const organicNoise = organicNoiseGenerator(simplexNoise, noiseConfig.organicNoise, dimensions);

  // combine both noises
  const rawTemperature = combineMaps(
    config.map,
    southToNorthGradient,
    organicNoise,
    noiseConfig.combineMaps.weight,
  );

  // colder at highlands and warmer in the lowlands
  const temperatureMap = [];
  for (let i = 0; i < dimensions.width; i++) {
    temperatureMap[i] = [];
    for (let j = 0; j < dimensions.height; j++) {
      const t = rawTemperature[i][j];
      const h = heightMap[i][j];
      let value = t;

      if (h > 0.0) {
        value -= (h - noiseConfig.temperatureMap.offset) * noiseConfig.temperatureMap.multiplier;
      }
      temperatureMap[i][j] = value;
    }
  }

  return temperatureMap;
};

const temperatureMap = generateTemperatureMap(config.map, temperatureMapConfig, elevationMap);

console.info('***** Render Maps *****');
// app.renderNoiseMap(elevationMap, oahuTheme, 'height');
app.renderNoiseMap(temperatureMap, temperatureTheme, 'temperature');
