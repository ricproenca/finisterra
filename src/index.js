import MersenneTwister from 'mersenne-twister';
import SimplexNoise from 'simplex-noise';

import config from './config/config.json';
import elevationMapConfig from './config/elevationMap.json';

import PixiMapRenderer from './renderer/PixiMapRenderer';

import { oahuTheme } from './themes';

console.info('##### FINISTERRA #####');
console.info('2D World generated by noise functions and renderered with Pixi.js');

const rngGenerator = new MersenneTwister();
const simplexNoise = new SimplexNoise(rngGenerator.random());

let MAX = -9999;
let MIN = 9999;

const resetmaxmin = () => {
  MAX = -9999;
  MIN = 9999;
};

const setmaxmin = (value) => {
  if (value < MIN) {
    MIN = value;
  }
  if (value > MAX) {
    MAX = value;
  }
};

const logmaxmin = () => {
  console.log(`[${MIN}, ${MAX}]`);
};

// // Define Land Shape
console.info('Define Land Shape');

const sumOctave = (numIterations, x, y, persistence, scale, low, high) => {
  let maxAmp = 0;
  let amp = 1;
  let freq = scale;
  let noise = 0;

  // add successively smaller, higher-frequency terms
  for (let i = 0; i < numIterations; ++i) {
    noise += simplexNoise.noise2D(x * freq, y * freq) * amp;
    maxAmp += amp;
    amp *= persistence;
    freq *= 2;
  }

  // take the average value of the iterations
  noise /= maxAmp;

  // normalize the result
  noise = noise * (high - low) / 2 + (high + low) / 2;
  return noise;
};

const generateLandMass = (dimensions, noiseConfig) => {
  resetmaxmin();
  const map = [];
  for (let x = 0; x < dimensions.width; x++) {
    map[x] = [];
    for (let y = 0; y < dimensions.height; y++) {
      const value = sumOctave(
        noiseConfig.octaves,
        x,
        y,
        noiseConfig.persistence,
        noiseConfig.scale,
        noiseConfig.low,
        noiseConfig.high,
      );
      setmaxmin(value);
      map[x][y] = value;
    }
  }
  logmaxmin();
  return map;
};

const elevationNoise = generateLandMass(config.map, elevationMapConfig.noiseMap);

console.info('***** Render Maps *****');
const app = new PixiMapRenderer(config.canvas, config.renderer, config.map);
app.renderNoiseMap(elevationNoise, oahuTheme, 'elevation noise');
